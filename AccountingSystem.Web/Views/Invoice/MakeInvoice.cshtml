@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "MakeInvoice";

    var userId = Context.Session.GetInt32("UserID");
    var accessRight = Context.Session.GetString("AccessRight");
    var onlineCompanyId = ViewBag.OnlineCompanyId;

    var accessRights = new string[0];

    if (string.IsNullOrEmpty(accessRight))
    {
        <script type="text/javascript">
            window.location.href = '@Url.Action("Index", "Home")';
        </script>
    }
    else
    {
        accessRights = accessRight.Split(',');
    }
}
<head>
    <style>
        .selected-row {
            border: 3px solid black !important;
        }

        .button-container {
            position: relative;
        }

        .extra-buttons {
            display: inline-block;
            position: absolute;
            top: 0;
            right: 110px; /* Adjust this value as needed */
        }

    </style>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.9/angular.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">

</head>


<div class="card">
    <div class="card-body" style="background-color:whitesmoke;font-size:14px">
        <div ng-app="myApp">
            <div ng-controller="myController">
                <h3 class="text-center" style="margin-top:-10px">Make Invoice</h3>
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-4">
                            <label><input type="radio" ng-model="invoiceType" value="0" ng-checked="invoiceType==0" ng-change="blankForNew()" />&nbsp; Make New Invoice</label><br />
                            <label class="mt-2"><input type="radio" ng-model="invoiceType" value="1" ng-change="blankForOld()" />&nbsp; View Existing Invoice</label>
                        </div>
                        <div class="col-sm-4 text-center">
                            <label>Invoice Number</label>
                            <input type="text" class="form-control form-control-sm text-center fw-bold" style="background-color:lightblue;border:2px solid" ng-model="invoiceNo" disabled />
                            @* <div class="text-center">
                            <button class="btn btn-primary btn-sm" ng-click="">Generate Invoice Number</button>
                            </div> *@
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row">
                                <label class="col-sm-4">Issue Date</label>
                                <div class="col-sm-8">
                                    <input type="date" class="form-control form-control-sm" ng-model="issueDate" />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-sm-4">Invoice Price</label>
                                <div class="col-sm-8">
                                    <input type="number" class="form-control form-control-sm" ng-model="invoicePrice" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                        </div>
                        <div class="row" style="margin-top:-20px">
                            <div class="d-flex align-content-start flex-wrap">
                                <label class="fw-bold">Companies</label>
                                <div class="col-sm-6">
                                    <input class="form-control form-control-sm" placeholder="Search Company Here" autocomplete="off" ng-model="searchQuery" ng-keyup="searchCompany(searchQuery)">
                                    <select class="form-control form-control-sm" size="10" id="companyList" ng-model="comList" style="position:absolute;z-index:999;width: 470px; overflow:auto ;background: white none repeat scroll 0% 0%" ng-show="companyList.length > 0">
                                        <option ng-repeat="company in companyList" value="{{company.id}}" ng-click="selectCompany(company)">{{company.name}}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-sm-5 mt-2">
                                <div style="height: 240px; overflow-y: auto;border:1px solid lightgray">
                                    <table class="table table-bordered table-hover table-sm" style="white-space:nowrap;">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>Products</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr ng-repeat="o in products" ng-click="bindOtherTable(o)" ng-class="{ 'selected-row': o === selectedRow }">
                                                <td>{{o.listItem}}</td>
                                            </tr>
                                        </tbody>
                                    </table>

                                </div>
                                <div class="row mt-2">
                                    <div class="col-sm-6">
                                        <label>Labels of Companies</label>
                                    </div>
                                    <div class="col-sm-6">
                                        <label class="d-flex justify-content-end"><input type="checkbox" ng-model="dtChk" />&nbsp; Delivery Tiger</label>
                                        <div class="button-container">
                                            <button class="btn btn-info btn-sm float-right" ng-click="toggleExtraButtons()">
                                                Preview Label
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" ng-show="showlabelspinner"></span>
                                            </button>
                                            <div class="extra-buttons" ng-show="showExtraButtons">
                                                <button class="btn btn-secondary btn-sm" ng-click="PreviewLabelreport('Pdf')">
                                                    <i class="fas fa-file-pdf" style="font-size: 20px;"></i>
                                                </button>
                                                <button class="btn btn-secondary btn-sm" ng-click="PreviewLabelreport('Word')">
                                                    <i class="fas fa-file-word" style="font-size: 20px;"></i>
                                                </button>


                                            </div>
                                        </div>


                                    </div>
                                </div>
                                <div class="row mt-2" style="border:1px solid lightgray;height:100px">
                                    <textarea ng-model="label"></textarea>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <label><input type="checkbox" ng-model="request" />&nbsp; Request Comment</label>
                                    </div>
                                    <div class="col-sm-6">
                                        <label><input type="checkbox" ng-model="print" />&nbsp; Print on color pad</label>
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-sm-4">
                                        <label>Challan Report</label>
                                    </div>

                                    <div class="col-sm-4">
                                        <select ng-model="CopyType" class="form-control form-control-sm">
                                            <option value="First Copy">First Copy</option>
                                            <option value="Second Copy">Second Copy</option>
                                        </select>
                                    </div>

                                    <div class="col-sm-4">
                                        @*  <button type="button" class="btn btn-block btn-primary btn-sm" ng-click="" ng-disabled="showChallanButton">Show Challan</button> *@
                                        <button type="button" class="btn btn-block btn-primary btn-sm" ng-click="downloadReportChallan()" ng-disabled="showChallanButton">
                                            Show Challan
                                            &nbsp;<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" ng-show="showChallanspinner"></span>
                                        </button>
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-sm-6">
                                        <button type="button" class="btn btn-block btn-success btn-sm" ng-click="save()" ng-disabled="saveDisabled">
                                            Save
                                            &nbsp;<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" ng-show="saveSpinner"></span>
                                        </button>
                                    </div>

                                    <div class="col-sm-6">
                                        @*  <button type="button" class="btn btn-block btn-info btn-sm" ng-click="" ng-disabled="showInvoiceButton">Show Invoice</button> *@
                                        <button type="button" class="btn btn-block btn-info btn-sm" ng-click="downloadReport()" ng-disabled="showInvoiceButton">
                                            Show Invoice
                                            &nbsp;<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" ng-show="showInviceSpinner"></span>
                                        </button>
                                    </div>

                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="col-sm-12 mt-5">
                                    <button class="btn btn-block btn-sm btn-outline-secondary" ng-click="go()" value="1" ng-disabled="rightArrow"><i class="bi bi-arrow-right"></i></button>
                                </div>
                                <div class="col-sm-12 mt-5">
                                    <button class="btn btn-block btn-sm btn-outline-secondary" ng-click="back()" value="2" ng-disabled="leftArrow"><i class="bi bi-arrow-left"></i></button>
                                </div>
                            </div>


                            <div class="col-sm-5 mt-2">
                                <div style="height: 193px; overflow-y: auto;border:1px solid lightgray">
                                    <table class="table table-bordered table-hover table-sm" style="white-space:nowrap;">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>Product</th>

                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr ng-repeat="shiftedProduct in shiftData" ng-click="passAnother(shiftedProduct)" ng-class="{ 'selected-row': shiftedProduct === selectedAnotherRow }">
                                                <td>{{ shiftedProduct.product }}</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="form-group row mt-2">
                                    <label class="col-sm-4">Total Price</label>
                                    <div class="col-sm-8">
                                        <input type="number" class="form-control form-control-sm text-right" ng-model="totalPrice" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <label>Comments of invoice item</label>
                                    </div>
                                    <div class="col-sm-6 d-flex justify-content-end mb-2">
                                        <button class="btn btn-primary btn-sm" ng-click="updateComment()">Update Comment</button>
                                    </div>
                                </div>
                                <div style="height: 200px; overflow-y: auto;border:1px solid lightgray" ng-hide="disabledCommentsTable">
                                    <table class="table table-bordered table-hover table-sm">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>Comments</th>
                                                <th>Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr ng-repeat="o in bindData">
                                                <td>{{o.comments}}</td>
                                                <td>{{o.schAmount}}</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="row" style="height:200px;border:1px solid lightgray" ng-hide="disabledComments">
                                    <textarea ng-model="comments"></textarea>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-sm-4">
                                        <input type="checkbox" ng-model="sMail" /><label>&nbsp; Send Invoice</label>
                                    </div>
                                    <div class="col-sm-4">
                                        <input type="checkbox" ng-model="sChallan" /><label>&nbsp; Send Challan</label>
                                    </div>
                                    <div class="col-sm-4">
                                        <button class="btn btn-primary btn-sm" ng-click="SendMail(sMail,sChallan)">
                                            Send Mail
                                            &nbsp;<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" ng-show="showMailpinner"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var app = angular.module('myApp', []);
    app.controller('myController', function ($scope, $http) {
        angular.element(document).ready(function () {


            var onlineCompanyId = @Json.Serialize(onlineCompanyId);
            if (onlineCompanyId !== null) {
                $scope.getIdWiseCompany(onlineCompanyId);
                $scope.loadProducts(onlineCompanyId, 0);
                $scope.setInvoiceNo(onlineCompanyId, $scope.issueDate);
                $scope.saveDisabled = false;
            }


        });
        $scope.CopyType = 'First Copy';
        $scope.invoiceType = 0;
        $scope.issueDate = new Date();
        $scope.disabledCommentsTable = true;
        $scope.disabledComments = false;
        $scope.rightArrow = true;
        $scope.leftArrow = true;
        $scope.companyList = [];
        $scope.selectedCompany = null;
        $scope.saveDisabled = true;
        $scope.showChallanButton = true;
        $scope.showInvoiceButton = true;
        $scope.showExtraButtons = false;

        $scope.getIdWiseCompany = function (id) {
            let Url = '';
            if (window.location.hostname == 'localhost')
                Url = '/Company/GetCompanyById';
            else
                Url = '/AccountingNew/Company/GetCompanyById';
            $http.get(Url, { params: { companyId: id } })
                .then(function (response) {
                    $scope.idWiseCompany = response.data;
                    $scope.onlineCompanyId = @onlineCompanyId
                        // Find the selected company based on onlineCompanyId
                        $scope.selectedCompany = $scope.idWiseCompany.find(function (company) {
                            return company.id === $scope.onlineCompanyId;
                        });

                    // Set the searchQuery and other related variables
                    if ($scope.selectedCompany) {
                        $scope.searchQuery = $scope.selectedCompany.name;
                    } else {
                        $scope.searchQuery = 'Select';
                    }
                }, function (error) {
                    console.error(error);
                });
        };




        $scope.blankForOld = function () {
            $scope.blankPrice();
            $scope.loadProducts($scope.selectedCompany.id, $scope.invoiceType);
            $scope.tableEmpty();
            $scope.comments = '';
            $scope.disabledCommentsTable = false;
            $scope.disabledComments = true;
            $scope.saveDisabled = true;
            $scope.showChallanButton = false;
            $scope.showInvoiceButton = false;
        };

        $scope.blankForNew = function () {
            $scope.blankPrice();
            $scope.loadProducts($scope.selectedCompany.id, $scope.invoiceType);
            $scope.label = '';
            $scope.disabledCommentsTable = true;
            $scope.disabledComments = false;
            $scope.saveDisabled = false;
            $scope.showChallanButton = true;
            $scope.showInvoiceButton = true;
        };

        $scope.blankPrice = function () {
            $scope.totalPrice = '';
            $scope.invoicePrice = '';
        };

        $scope.tableEmpty = function () {
            return $scope.shiftData = [];
        };




        $scope.searchCompany = function (startingKey) {
            if (startingKey && startingKey.length > 1) {
                let Url = '';
                if (window.location.hostname == 'localhost')
                    Url = '/Company/GetCompanyListByKey';
                else
                    Url = '/AccountingNew/Company/GetCompanyListByKey';

                $http.get(Url, { params: { startingKey: startingKey } })
                    .then(function (response) {
                        $scope.companyList = response.data;
                    }, function (error) {
                        console.error(error);
                    })
            } else {
                $scope.companyList = [];
            }
        };

        $scope.selectCompany = function (company) {
            $scope.selectedCompany = company;
            $scope.searchQuery = company.name;
            $scope.companyList = [];
            $scope.loadProducts($scope.selectedCompany.id, $scope.invoiceType);
            if ($scope.invoiceType == 0) {
                $scope.setInvoiceNo($scope.selectedCompany.id, $scope.issueDate);
                $scope.disabledCommentsTable = true;
                $scope.disabledComments = false;
                $scope.rightArrow = false;
                $scope.leftArrow = false;
                $scope.saveDisabled = false;

            }
            else {
                $scope.disabledCommentsTable = false;
                $scope.disabledComments = true;
                $scope.rightArrow = true;
                $scope.leftArrow = true;
                $scope.saveDisabled = true;

                $scope.showChallanButton = false;
                $scope.showInvoiceButton = false;

            }
        }

        $scope.loadProducts = function (cId, type) {
            var params = {
                cId: cId,
                type: type
            };

            let Url = '';
            if (window.location.hostname == 'localhost')
                Url = '/Invoice/GetProductsForInvoice';
            else
                Url = '/AccountingNew/Invoice/GetProductsForInvoice';
            $http.get(Url, { params: params })
                .then(function (response) {
                    $scope.products = response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
        };

        $scope.selectedRow = null;
        $scope.bindOtherTable = function (row) {
            if ($scope.selectedRow === row) {
                // If the same row is clicked again, deselect it
                $scope.selectedRow = null;
            } else {
                $scope.selectedRow = row;
                // Call your showJobData function or perform other actions here
                $scope.bindAllData(row.id);
                if ($scope.invoiceType == 0) {
                    $scope.rightArrow = false;
                    $scope.leftArrow = true;
                }
            }
        };




        $scope.selectedAnotherRow = null;
        $scope.comments = '';
        $scope.totalPrice = 0;

        $scope.passAnother = function (shiftedProduct) {
            if (shiftedProduct.product !== "") {
                if ($scope.selectedAnotherRow === shiftedProduct) {
                    $scope.selectedAnotherRow = null;
                    $scope.comments = '';
                } else {
                    $scope.selectedAnotherRow = shiftedProduct;
                    //$scope.totalPrice = $scope.selectedAnotherRow.amount;
                    //$scope.totalPrice += $scope.selectedAnotherRow.amount;
                    var comments = "";
                    var ledgerId = shiftedProduct.ledgerId;

                    if (shiftedProduct.comments == "" || shiftedProduct.comments == null || shiftedProduct.comments.length < 110) {

                        var partssDate = shiftedProduct.sDate.split("/");
                        var formattedSDate = (partssDate[1].length === 1 ? '0' + partssDate[1] : partssDate[1]) + "-" + (partssDate[0].length === 1 ? '0' + partssDate[0] : partssDate[0]) + "-" + partssDate[2];

                        var partseDate = shiftedProduct.eDate.split("/");
                        var formattedeDate = (partseDate[1].length === 1 ? '0' + partseDate[1] : partseDate[1]) + "-" + (partseDate[0].length === 1 ? '0' + partseDate[0] : partseDate[0]) + "-" + partseDate[2];

                        if (
                            //ledgerId == 44 ||
                            ledgerId == 1165 ||
                            //ledgerId == 2253 ||
                            ledgerId == 2270 ||
                            ledgerId == 8388 ||
                            ledgerId == 18979 ||
                            ledgerId == 18981 ||
                            ledgerId == 18980 ||
                            //ledgerId == 22254 ||
                            ledgerId == 22255 ||
                            ledgerId == 22257 ||
                            ledgerId == 26422
                        ) {
                            comments =
                                "Payment for '" +
                                shiftedProduct.sbName +
                                "' at the classified section of Bdjobs.com from " +
                                formattedSDate +
                                " to " +
                                formattedeDate +
                                " for the following job position(s):\n\n" +
                                shiftedProduct.product;
                        }
                        else if (
                            ledgerId == 44 ||

                            ledgerId == 2253 ||

                            ledgerId == 22254 ||

                            ledgerId == 26451
                        ) {
                            var serviceName = "";
                            if (shiftedProduct.sbName == "Online Job Posting (Standard Listing)")
                                serviceName = "Standard Listing";
                            else if (shiftedProduct.sbName == "Online Job Posting (Premium Listing)")
                                serviceName = "Premium Listing";
                            else if (shiftedProduct.sbName == "Online Job Posting (Premium Plus Listing)")
                                serviceName = "Premium Plus Listing";
                            else if (shiftedProduct.sbName == "Online Job Posting-Basic (SME)")
                                serviceName = "SME package";

                            comments =
                                "Payment for Web Listing Services under '" +
                                serviceName +
                                "' at the classified section of Bdjobs.com from " +
                                formattedSDate +
                                " to " +
                                formattedeDate +
                                " for the following job position(s):\n\nDesignation Name: " +
                                shiftedProduct.product;
                        }
                        else if (ledgerId == 18) {
                            comments =
                                "Payment for 'Job Announcement Display' at the Home Page of Bdjobs.com from " +
                                formattedSDate +
                                " to " +
                                formattedeDate +
                                " for the following position(s):\n\n" +
                                shiftedProduct.product;
                        } if (shiftedProduct.product.trim() === "VAT (AP)") {
                            comments = "Add: VAT@5% Under Service Code: S099.10 (IT Enabled Services)";
                        } else {
                            comments =
                                "Payment for Web Listing (" +
                                shiftedProduct.product +
                                ") at the classified section of www.bdjobs.com from " +
                                formattedSDate +
                                " to " +
                                formattedeDate +
                                " for the following position:\n\n" +
                                shiftedProduct.product;
                        }
                    } else {
                        comments = shiftedProduct.comments;
                    }

                    $scope.comments = comments;
                }
                if ($scope.invoiceType == 0) {
                    $scope.rightArrow = true;
                    $scope.leftArrow = false;
                }

            }
        };



        $scope.bindAllData = function (id) {
            if ($scope.invoiceType == 0) {

            }
            else {
                let Url = '';
                if (window.location.hostname == 'localhost')
                    Url = '/Invoice/GetProductsDetails';
                else
                    Url = '/AccountingNew/Invoice/GetProductsDetails';
                $http.get(Url, { params: { Id: id } })
                    .then(function (response) {
                        $scope.bindData = response.data;
                        $scope.invoicePrice = response.data[0].totalAmount;
                        $scope.totalPrice = response.data[0].totalAmount;
                        $scope.label = response.data[0].label;
                        $scope.issueDate = response.data[0].invSendDt;
                        $scope.invoiceNo = response.data[0].invoice_No;
                    }, function (error) {
                        console.error(error);
                        alert('Error fetching job data');
                    });
            }

        };

        $scope.setInvoiceNo = function (id, issueDate) {
            var params = {
                cId: id,
                issueDate: issueDate
            };
            let Url = '';
            if (window.location.hostname == 'localhost')
                Url = '/Invoice/GenerateInvoiceNumber';
            else
                Url = '/AccountingNew/Invoice/GenerateInvoiceNumber';
            $http.get(Url, { params: params })
                .then(function (response) {
                    $scope.invoiceNo = response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
        };

        $scope.shiftData = [];
        $scope.go = function () {
            if ($scope.selectedRow) {
                // Check if shiftData is defined
                if (!$scope.shiftData) {
                    $scope.shiftData = [];
                }
                // Push the selected row into shiftData
                $scope.shiftData.push($scope.selectedRow);
                // Remove the selected row from the original data array (products)
                var indexToRemove = $scope.products.indexOf($scope.selectedRow);
                if (indexToRemove !== -1) {
                    $scope.products.splice(indexToRemove, 1);
                }
                $scope.totalPrice += $scope.selectedRow.amount;
                $scope.selectedRow = null;
            } else {
                console.log('Please select a row before clicking Go.');
            }
        };



        $scope.products = [];
        $scope.back = function () {
            if ($scope.selectedAnotherRow) {
                // Check if products is defined
                if (!$scope.products) {
                    $scope.products = [];
                }
                // Unshift the selected row into products
                $scope.products.unshift($scope.selectedAnotherRow);
                // Remove the selected row from the original data array (shiftData)
                var indexToRemove = $scope.shiftData.indexOf($scope.selectedAnotherRow);
                if (indexToRemove !== -1) {
                    $scope.shiftData.splice(indexToRemove, 1);
                }
                $scope.totalPrice -= $scope.selectedAnotherRow.amount;
                $scope.selectedAnotherRow = null;
            } else {
                console.log('Please select a row before clicking back.');
            }
        };


        $scope.updateComment = function () {
            var confirmation = window.confirm('Are you sure to update comments?');
            if (confirmation) {
                $scope.updateDeleteComments('C', $scope.selectedAnotherRow.id, 0, 0, $scope.comments);
            }
        };
        $scope.formattedFromDate = $scope.issueDate.toISOString().split('T')[0];
        //$scope.formattedFromDate = $scope.issueDate;
        $scope.updateDeleteComments = function (action, id, invoiceId, amount, comments) {
            let requestBodyModel = {
                action: action,
                invSchId: id.toString(),
                invoiceId: invoiceId.toString(),
                amount: amount.toString(),
                comments: comments,
                sendDate: $scope.formattedFromDate
            };

            let Url = '';
            if (window.location.hostname == 'localhost')
                Url = '/Invoice/UpdateDeleteComments';
            else
                Url = '/AccountingNew/Invoice/UpdateDeleteComments';

            $http.post(Url, requestBodyModel)
                .then(function (response) {
                    var str = "";
                    if (action == 'U')
                        str = "Comment is updated successfully.";
                    else if (action == 'D')
                        str = "Comment is deleted successfully.";
                    else
                        str = "Comment is updated successfully.";

                    alert(str);
                })
                .catch(function (error) {
                    console.log(error);
                });
        };
        function toggleButtons() {
            var additionalButtons = document.getElementsByClassName("additionalButton");
            for (var i = 0; i < additionalButtons.length; i++) {
                if (additionalButtons[i].style.display === "none") {
                    additionalButtons[i].style.display = "inline-block";
                } else {
                    additionalButtons[i].style.display = "none";
                }
            }
        }

        $scope.save = function () {
            if ($scope.searchQuery == "" || $scope.searchQuery == null || $scope.searchQuery == undefined) {
                alert('Company is required.');
                return false;
            }
            var access = '@accessRights.Contains("1")';
            if (access === 'False') {
                alert("Sorry, You have no permission to save a record.");
            } else {
                var isConfirmed = confirm('Did you update the comments?');
                if (isConfirmed) {
                    if (!$scope.invoiceNo || $scope.invoiceNo.substr(0, 4) === "0000" || $scope.invoiceNo === "") {
                        alert("You must give a valid invoice number. It must follow the format:\n\n'yymm-company code(4 digit)-company invoice no(4 digit)-total invoice no(6 digit)'.");
                    } else if ($scope.invoiceNo.length < 23) {
                        alert("You must give a valid invoice number which must follow the format:\n\n'yymm-company code(4 digit)-company invoice no(4 digit)-total invoice no(6 digit)'.");
                    } else if ($scope.invoiceType === 0) {
                        var tno = "";
                        for (var i = 0; i < $scope.shiftData.length; i++) {
                            if ($scope.shiftData[i].tno !== "") {
                                tno += "," + $scope.shiftData[i].tno
                            }
                        }

                        var tnolist = tno.substring(1, tno.length);

                        if (tnolist === "") {
                            alert("There are no products to save.");
                            return false;
                        }


                        var requestBodyModel = {
                            cId: $scope.selectedCompany.id.toString(),
                            tnolist: tnolist
                        };

                        let Url = '';
                        if (window.location.hostname == 'localhost')
                            Url = '/Sale/CheckOnlineJobs';
                        else
                            Url = '/AccountingNew/Sale/CheckOnlineJobs';
                        $http.post(Url, requestBodyModel)
                            .then(function (response) {
                                $scope.data = response.data;

                                if ($scope.data.online < $scope.data.total) {
                                    var shouldProceed = confirm(
                                        "Total Online job posted " + $scope.data.total + ".\n" +
                                        "You select for making invoice " + $scope.data.online + " jobs.\n" +
                                        "You need another " + ($scope.data.total - $scope.data.online) + " job(s).\n\n" +
                                        "Do you want to make invoice without adding remaining job(s)?"
                                    );

                                    if (shouldProceed) {
                                        $scope.checkInvoice();
                                    }
                                }
                                else {
                                    $scope.checkInvoice();
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                            });


                    }
                    // else {
                    //     $scope.checkInvoice();
                    // }
                }
            }
        };


        $scope.checkInvoice = function () {
            let Url = '';
            if (window.location.hostname == 'localhost')
                Url = '/Invoice/CheckInvoiceNo';
            else
                Url = '/AccountingNew/Invoice/CheckInvoiceNo';

            $http.get(Url, { params: $scope.invoiceNo })
                .then(function (response) {
                    if (response.data == true) {
                        var userConfirmed = confirm("The invoice Number is already exist. Do you want to make invoice with this existing invoice Number?");

                        if (userConfirmed) {
                            $scope.finalCheck();
                        }
                    } else {
                        $scope.finalCheck();
                    }
                })
                .catch(function (error) {
                    console.log(error);
                })

        };

        $scope.finalCheck = function () {
            var id = "";
            for (var i = 0; i < $scope.shiftData.length; i++) {
                if ($scope.shiftData[i].id != "")
                    id += "," + $scope.shiftData[i].id;
            }
            var idList = id;
            var confirmation = confirm("Do you finally want to proceed with invoice number " + $scope.invoiceNo + " ?");
            if (confirmation) {
                var action;
                if ($scope.invoiceType == 0)
                    action = 'Make';
                else
                    action = 'View';

                $scope.cpId = $scope.selectedCompany.id.toString();
                $scope.formattedFromDate = $scope.issueDate.toISOString().split('T')[0];
                //$scope.formattedFromDate = $scope.issueDate;
                $scope.invoiceId = $scope.selectedAnotherRow.id.toString();
                let requestBodyModel = {
                    userId: @userId,
                    action: action,
                    cId: $scope.cpId == null ? 0 : $scope.cpId,
                    invoice: $scope.invoiceNo,
                    issueDate: $scope.formattedFromDate,
                    totalprice: $scope.totalPrice.toString(),
                    idList: idList,
                    InvoiceId: $scope.invoiceId
                }
                let Url = '';
                if (window.location.hostname == 'localhost')
                    Url = '/Invoice/SaveInvoice';
                else
                    Url = '/AccountingNew/Invoice/SaveInvoice';

                $scope.saveSpinner = true;
                $http.post(Url, requestBodyModel)
                    .then(function (response) {
                        var data = response.data;
                        if (data == "Insert Successfully!") {
                            alert("Invoice information is successfully saved.");
                            $scope.saveDisabled = true;
                            $scope.saveSpinner = false;


                            $scope.blankPrice();
                            $scope.loadProducts($scope.selectedCompany.id, 1);
                            $scope.tableEmpty();
                            $scope.comments = '';
                            $scope.disabledCommentsTable = false;
                            $scope.disabledComments = true;
                            $scope.saveDisabled = true;
                            $scope.showChallanButton = false;
                            $scope.showInvoiceButton = false;
                            $scope.invoiceType = '1';
                        } else {
                            alert("Error: " + data);
                            $scope.saveSpinner = false;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        $scope.saveSpinner = false;
                    })
            }
        };

        // $scope.Show = function () {
        //     $http.get('/Report/Show', { params: { InvoiceNo: '2402-003466-2175-318342' }, responseType: 'arraybuffer' })
        //         .then(function (response) {
        //             // Create a Blob from the PDF Stream
        //             var file = new Blob([response.data], { type: 'application/pdf' });

        //             // Create URL for the Blob
        //             var fileURL = URL.createObjectURL(file);

        //             // Open the URL in a new window
        //             window.open(fileURL);
        //         })
        //         .catch(function (error) {
        //             console.error(error);
        //             alert('Error fetching job data');
        //         });
        // };
        $scope.downloadReport = function () {
            const format = 'pdf'; // Use default format if not selected
            const invoiceId = $scope.selectedRow.sbName;
            const isColorPad = $scope.print ? 1 : 0;

            const params = { InvoiceNo: invoiceId, format, isColorPad };
            const Url = window.location.hostname === 'localhost' ? '/Report/ShowInvoice' : '/AccountingNew/Report/ShowInvoice';

            $scope.showInviceSpinner = true;
            $http.get(Url, { params, responseType: 'blob' })
                .then(response => {
                    $scope.showInviceSpinner = false;
                    const blob = new Blob([response.data], { type: response.headers('Content-Type') });
                    const filename = response.headers('Content-Disposition').split(';')[1].split('=')[1];

                    if (format === 'excel') {
                        // Download Excel file
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = filename;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    } else if (format === 'pdf') {
                        // Open PDF file in a new window with proper user feedback
                        try {
                            const pdfData = URL.createObjectURL(blob);
                            window.open(pdfData, '_blank');
                        } catch (err) {
                            console.error('Error opening PDF:', err);
                            alert('An error occurred while opening the PDF. Please check your browser settings and try again.');
                        } finally {
                            URL.revokeObjectURL(pdfData); // Always revoke created URL objects
                        }
                    } else {
                        console.error('Unsupported format:', format);
                        alert('The selected format is not supported. Please choose PDF or Excel.');
                    }
                });
        };
        $scope.downloadReportChallan = function () {
            const format = 'pdf'; // Use default format if not selected
            const invoiceId = $scope.selectedRow.sbName;
            const copyType = $scope.CopyType;

            const params = { InvoiceNo: invoiceId, format, CopyType: copyType };
            const Url = window.location.hostname === 'localhost' ? '/Report/ShowChallanReportNew' : '/AccountingNew/Report/ShowChallanReportNew';

            $scope.showChallanspinner = true;
            $http.get(Url, { params, responseType: 'blob' })
                .then(response => {
                    $scope.showChallanspinner = false;
                    const blob = new Blob([response.data], { type: response.headers('Content-Type') });
                    const filename = response.headers('Content-Disposition').split(';')[1].split('=')[1];

                    if (format === 'excel') {
                        // Download Excel file
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = filename;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    } else if (format === 'pdf') {
                        // Open PDF file in a new window with proper user feedback
                        try {
                            const pdfData = URL.createObjectURL(blob);
                            window.open(pdfData, '_blank');
                        } catch (err) {
                            console.error('Error opening PDF:', err);
                            alert('An error occurred while opening the PDF. Please check your browser settings and try again.');
                        } finally {
                            URL.revokeObjectURL(pdfData); // Always revoke created URL objects
                        }
                    } else {
                        $scope.showChallanspinner = false;
                        console.error('Unsupported format:', format);
                        alert('The selected format is not supported. Please choose PDF or Excel.');
                    }
                });
        };
        $scope.PreviewLabelreport = function (format) {
            $scope.toggleExtraButtons();
            const listId = $scope.selectedRow.id;
            const invoiceId = $scope.selectedRow.sbName;
            if (listId == 0) {
                alert("select any Invoice first");
                return;
            }

            const params = { type: 0, list: listId, format, dtChk: $scope.dtChk, invoiceId };
            const Url = window.location.hostname === 'localhost' ? '/Report/PreviewLabelReport' : '/AccountingNew/Report/PreviewLabelReport';

            $scope.showlabelspinner = true;
            $http.get(Url, { params, responseType: 'blob' })
                .then(response => {
                    $scope.showlabelspinner = false;
                    const blob = new Blob([response.data], { type: response.headers('Content-Type') });
                    const filename = response.headers('Content-Disposition').split(';')[1].split('=')[1];

                    if (format === 'Word') {
                        // Download Excel file
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = filename;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    } else if (format === 'Pdf') {
                        // Open PDF file in a new window with proper user feedback
                        try {
                            const pdfData = URL.createObjectURL(blob);
                            window.open(pdfData, '_blank');
                        } catch (err) {
                            console.error('Error opening PDF:', err);
                            alert('An error occurred while opening the PDF. Please check your browser settings and try again.');
                        } finally {
                            URL.revokeObjectURL(pdfData); // Always revoke created URL objects
                        }
                    } else {
                        $scope.showlabelspinner = false;
                        console.error('Unsupported format:', format);
                        alert('The selected format is not supported. Please choose PDF or Excel.');
                    }
                });
        };

        $scope.toggleExtraButtons = function () {
            $scope.showExtraButtons = !$scope.showExtraButtons;
        };

        $scope.SendMail = function (sMail, sChallan) {

            const format = 'pdf'; // Use default format if not selected
            const invoiceId = $scope.selectedRow.sbName;
            const copyType = $scope.CopyType;

            const params = { InvoiceNo: invoiceId, format, sMail, sChallan, CopyType: copyType };
            $scope.showMailpinner = true;
            const Url = window.location.hostname === 'localhost' ? '/Report/ReportMail' : '/AccountingNew/Report/ReportMail';
            $http.get(Url, { params })
                .then(function (response) {
                    $scope.showMailpinner = false;
                    alert(response.data);
                })
                .catch(function (error) {
                    $scope.showMailpinner = false;
                    console.log(error);
                })
        };



    });
</script>


